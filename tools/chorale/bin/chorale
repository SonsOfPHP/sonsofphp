#!/usr/bin/env php
<?php declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Chorale\Console\Style\ConsoleStyleFactory;
use Chorale\Console\SetupCommand;
use Chorale\Repo\TemplateRenderer;
use Chorale\Util\PathUtils;
use Chorale\Util\Sorting;
use Chorale\Discovery\PackageIdentity;
use Chorale\Config\ConfigDefaults;
use Chorale\Config\SchemaValidator;
use Chorale\IO\BackupManager;
use Chorale\IO\JsonReporter;
use Chorale\Telemetry\RunSummary;
use Chorale\Config\ConfigLoader;
use Chorale\Config\ConfigWriter;
use Chorale\Config\ConfigNormalizer;
use Chorale\Discovery\ComposerMetadata;
use Chorale\Discovery\PackageScanner;
use Chorale\Discovery\PatternMatcher;
use Chorale\Repo\RepoResolver;
use Chorale\Rules\RequiredFilesChecker;
use Chorale\Rules\ConflictDetector;
use Chorale\Composer\ComposerJsonReader;
use Chorale\Composer\DependencyMerger;
use Chorale\Composer\RuleEngine;
use Chorale\Split\ContentHasher;
use Chorale\Split\SplitDecider;
use Chorale\State\FilesystemStateStore;
use Chorale\Util\DiffUtil;
use Chorale\Plan\PlanBuilder;
use Chorale\Console\PlanCommand;
use Chorale\Console\ApplyCommand;
use Chorale\Console\RunCommand;
use Chorale\Run\Runner;
use Chorale\Run\StepExecutorRegistry;
use Chorale\Run\PackageVersionUpdateExecutor;
use Chorale\Run\RootDependencyMergeExecutor;
use Chorale\Run\ComposerRootUpdateExecutor;

$paths          = new PathUtils();
$renderer       = new TemplateRenderer();
$sorting        = new Sorting();
$identity       = new PackageIdentity();
$defaults       = new ConfigDefaults();
$schema         = new SchemaValidator();
$backup         = new BackupManager();
$json           = new JsonReporter();
$summary        = new RunSummary();
$loader         = new ConfigLoader();
$composerMeta   = new ComposerMetadata();
$composerReader = new ComposerJsonReader();
$stateStore     = new FilesystemStateStore();
$hasher         = new ContentHasher();
$diffs          = new DiffUtil();

$ruleEngine   = new RuleEngine($renderer);
$writer       = new ConfigWriter($backup);
$normalizer   = new ConfigNormalizer($sorting, $defaults);
$scanner      = new PackageScanner($paths);
$matcher      = new PatternMatcher($paths);
$resolver     = new RepoResolver($renderer, $paths);
$required     = new RequiredFilesChecker();
$conflicts    = new ConflictDetector($matcher);
$depMerger    = new DependencyMerger($composerReader);
$splitDecider = new SplitDecider($stateStore, $hasher);

$planner = new PlanBuilder(
    defaults: $defaults,
    scanner: $scanner,
    matcher: $matcher,
    resolver: $resolver,
    paths: $paths,
    composerReader: $composerReader,
    depMerger: $depMerger,
    ruleEngine: $ruleEngine,
    splitDecider: $splitDecider,
    diffs: $diffs,
);
$executors = new StepExecutorRegistry([
    new PackageVersionUpdateExecutor(),
    new RootDependencyMergeExecutor(),
    new ComposerRootUpdateExecutor(),
]);
$runner = new Runner(
    configLoader: $loader,
    planner: $planner,
    executors: $executors,
);


// -----------------------------------------------------------------------------
$app = new Application('Chorale', '0.1.0');
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
$app->add(new SetupCommand(
    styleFactory: new ConsoleStyleFactory(),
    configLoader: $loader,
    configWriter: $writer,
    configNormalizer: $normalizer,
    schemaValidator: $schema,
    defaults: $defaults,
    scanner: $scanner,
    matcher: $matcher,
    resolver: $resolver,
    identity: $identity,
    requiredFiles: $required,
    //conflicts: $conflicts,
    jsonReporter: $json,
    summary: $summary,
    composerMeta: $composerMeta,
));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
$app->add(new PlanCommand(
    styleFactory: new ConsoleStyleFactory(),
    configLoader: $loader,
    planner: $planner,
));
// -----------------------------------------------------------------------------
$app->add(new ApplyCommand(
    styleFactory: new ConsoleStyleFactory(),
    runner: $runner,
));
// -----------------------------------------------------------------------------
$app->add(new RunCommand(
    styleFactory: new ConsoleStyleFactory(),
    runner: $runner,
));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
$app->run();
// -----------------------------------------------------------------------------
